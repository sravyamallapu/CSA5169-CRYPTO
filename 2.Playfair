#include <stdio.h>
#include <string.h>
#define SIZE 5

char keySquare[SIZE][SIZE];

// Function to preprocess the key, removing duplicates
void preprocessKey(char key[]) {
    int used[26] = {0}, x = 0, y = 0;
    for (int i = 0; key[i]; i++) {
        if (key[i] == 'j') key[i] = 'i'; // Merge 'i' and 'j'
        if (!used[key[i] - 'a']) {
            keySquare[x][y++] = key[i], used[key[i] - 'a'] = 1;
            if (y == SIZE) y = 0, x++;
        }
    }
    for (char c = 'a'; x < SIZE && c <= 'z'; c++) {
        if (c == 'j') continue; // Skip 'j'
        if (!used[c - 'a']) {
            keySquare[x][y++] = c, used[c - 'a'] = 1;
            if (y == SIZE) y = 0, x++;
        }
    }
}

// Find position of a character in the key square
void findPos(char c, int *x, int *y) {
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (keySquare[i][j] == c) *x = i, *y = j;
}

// Encrypt a pair of characters
void encryptPair(char *a, char *b) {
    int x1, y1, x2, y2;
    findPos(*a, &x1, &y1);
    findPos(*b, &x2, &y2);
    if (x1 == x2) *a = keySquare[x1][(y1 + 1) % SIZE], *b = keySquare[x2][(y2 + 1) % SIZE];
    else if (y1 == y2) *a = keySquare[(x1 + 1) % SIZE][y1], *b = keySquare[(x2 + 1) % SIZE][y2];
    else *a = keySquare[x1][y2], *b = keySquare[x2][y1];
}

// Playfair encryption function
void playfairEncrypt(char text[], char key[]) {
    preprocessKey(key);
    for (int i = 0; text[i]; i += 2) {
        if (text[i] == text[i + 1]) text[i + 1] = 'x';
        if (!text[i + 1]) text[i + 1] = 'x';
        encryptPair(&text[i], &text[i + 1]);
    }
}

int main() {
    char key[] = "keyword";
    char text[] = "hellothere";
    playfairEncrypt(text, key);
    printf("Encrypted: %s\n", text);
    return 0;
}
